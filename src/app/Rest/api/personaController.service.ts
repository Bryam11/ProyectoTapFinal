/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Persona } from '../model/persona';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class PersonaControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * anadirPublicacionPersona
     * 
     * @param IDE IDE
     * @param codigo codigo
     * @param descripcion descripcion
     * @param fecha fecha
     * @param lenguaje lenguaje
     * @param titulo titulo
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public anadirPublicacionPersonaUsingPUT(IDE?: string, codigo?: string, descripcion?: string, fecha?: string, lenguaje?: string, titulo?: string, usuario?: string, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public anadirPublicacionPersonaUsingPUT(IDE?: string, codigo?: string, descripcion?: string, fecha?: string, lenguaje?: string, titulo?: string, usuario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public anadirPublicacionPersonaUsingPUT(IDE?: string, codigo?: string, descripcion?: string, fecha?: string, lenguaje?: string, titulo?: string, usuario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public anadirPublicacionPersonaUsingPUT(IDE?: string, codigo?: string, descripcion?: string, fecha?: string, lenguaje?: string, titulo?: string, usuario?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {








        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (IDE !== undefined && IDE !== null) {
            queryParameters = queryParameters.set('IDE', <any>IDE);
        }
        if (codigo !== undefined && codigo !== null) {
            queryParameters = queryParameters.set('codigo', <any>codigo);
        }
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }
        if (fecha !== undefined && fecha !== null) {
            queryParameters = queryParameters.set('fecha', <any>fecha);
        }
        if (lenguaje !== undefined && lenguaje !== null) {
            queryParameters = queryParameters.set('lenguaje', <any>lenguaje);
        }
        if (titulo !== undefined && titulo !== null) {
            queryParameters = queryParameters.set('titulo', <any>titulo);
        }
        if (usuario !== undefined && usuario !== null) {
            queryParameters = queryParameters.set('usuario', <any>usuario);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Persona>('put', `${this.basePath}/persona/InsertarPublicacionByUsuario`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * CargarUsuario
     * 
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cargarUsuarioUsingGET(usuario?: string, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public cargarUsuarioUsingGET(usuario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public cargarUsuarioUsingGET(usuario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public cargarUsuarioUsingGET(usuario?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (usuario !== undefined && usuario !== null) {
            queryParameters = queryParameters.set('usuario', <any>usuario);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Persona>('get', `${this.basePath}/persona/VerUsuarioEditar`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ComprobarLogueo
     * 
     * @param contrasea Contraseña
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public comprobarLogueoUsingGET(contrasea?: string, usuario?: string, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public comprobarLogueoUsingGET(contrasea?: string, usuario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public comprobarLogueoUsingGET(contrasea?: string, usuario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public comprobarLogueoUsingGET(contrasea?: string, usuario?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (contrasea !== undefined && contrasea !== null) {
            queryParameters = queryParameters.set('Contraseña', <any>contrasea);
        }
        if (usuario !== undefined && usuario !== null) {
            queryParameters = queryParameters.set('usuario', <any>usuario);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Persona>('get', `${this.basePath}/persona/Comprobarlogueo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * editarUsuario
     * 
     * @param apellido apellido
     * @param edad edad
     * @param email email
     * @param foto foto
     * @param nombre nombre
     * @param pais pais
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editarUsuarioUsingPUT(apellido?: string, edad?: string, email?: string, foto?: string, nombre?: string, pais?: string, usuario?: string, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public editarUsuarioUsingPUT(apellido?: string, edad?: string, email?: string, foto?: string, nombre?: string, pais?: string, usuario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public editarUsuarioUsingPUT(apellido?: string, edad?: string, email?: string, foto?: string, nombre?: string, pais?: string, usuario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public editarUsuarioUsingPUT(apellido?: string, edad?: string, email?: string, foto?: string, nombre?: string, pais?: string, usuario?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {








        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (apellido !== undefined && apellido !== null) {
            queryParameters = queryParameters.set('apellido', <any>apellido);
        }
        if (edad !== undefined && edad !== null) {
            queryParameters = queryParameters.set('edad', <any>edad);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (foto !== undefined && foto !== null) {
            queryParameters = queryParameters.set('foto', <any>foto);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }
        if (pais !== undefined && pais !== null) {
            queryParameters = queryParameters.set('pais', <any>pais);
        }
        if (usuario !== undefined && usuario !== null) {
            queryParameters = queryParameters.set('usuario', <any>usuario);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Persona>('put', `${this.basePath}/persona/EditarUsuario`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findMaxIdPersona
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findMaxIdPersonaUsingGET(observe?: 'body', reportProgress?: boolean): Observable<number>;
    public findMaxIdPersonaUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public findMaxIdPersonaUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public findMaxIdPersonaUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get', `${this.basePath}/persona/findMaxIdPersona`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * guardarPersona
     * 
     * @param body persona
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guardarPersonaUsingPOST(body: Persona, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public guardarPersonaUsingPOST(body: Persona, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public guardarPersonaUsingPOST(body: Persona, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public guardarPersonaUsingPOST(body: Persona, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guardarPersonaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Persona>('post', `${this.basePath}/persona`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * likeByCodigo
     * 
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public likeByCodigoUsingGET(codigo?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public likeByCodigoUsingGET(codigo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public likeByCodigoUsingGET(codigo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public likeByCodigoUsingGET(codigo?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (codigo !== undefined && codigo !== null) {
            queryParameters = queryParameters.set('codigo', <any>codigo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get', `${this.basePath}/persona/likebyCodigo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * likeByDescripcion
     * 
     * @param descripcion descripcion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public likeByDescripcionUsingGET(descripcion?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public likeByDescripcionUsingGET(descripcion?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public likeByDescripcionUsingGET(descripcion?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public likeByDescripcionUsingGET(descripcion?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (descripcion !== undefined && descripcion !== null) {
            queryParameters = queryParameters.set('descripcion', <any>descripcion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get', `${this.basePath}/persona/likebyDescripcion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonas
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get', `${this.basePath}/persona/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonasbylenguaje
     * 
     * @param lenguaje Lenguaje
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbylenguajeUsingGET(lenguaje?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbylenguajeUsingGET(lenguaje?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbylenguajeUsingGET(lenguaje?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbylenguajeUsingGET(lenguaje?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (lenguaje !== undefined && lenguaje !== null) {
            queryParameters = queryParameters.set('Lenguaje', <any>lenguaje);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get', `${this.basePath}/persona/listbyLenguaje`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verusuario
     * 
     * @param usuario usuario
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verusuarioUsingGET(usuario?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public verusuarioUsingGET(usuario?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public verusuarioUsingGET(usuario?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public verusuarioUsingGET(usuario?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (usuario !== undefined && usuario !== null) {
            queryParameters = queryParameters.set('usuario', <any>usuario);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get', `${this.basePath}/persona/VerUsuario`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
