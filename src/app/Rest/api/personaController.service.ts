/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Persona } from '../model/persona';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PersonaControllerService {

    protected basePath = '//localhost:8080/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * buscarPersonaByCedula
     * 
     * @param cedula cedula
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buscarPersonaByCedulaUsingGET(cedula: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public buscarPersonaByCedulaUsingGET(cedula: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public buscarPersonaByCedulaUsingGET(cedula: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public buscarPersonaByCedulaUsingGET(cedula: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cedula === null || cedula === undefined) {
            throw new Error('Required parameter cedula was null or undefined when calling buscarPersonaByCedulaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cedula !== undefined && cedula !== null) {
            queryParameters = queryParameters.set('cedula', <any>cedula);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/findByCedula`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * guardarPersona
     * 
     * @param body persona
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guardarPersonaUsingPOST(body: Persona, observe?: 'body', reportProgress?: boolean): Observable<Persona>;
    public guardarPersonaUsingPOST(body: Persona, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Persona>>;
    public guardarPersonaUsingPOST(body: Persona, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Persona>>;
    public guardarPersonaUsingPOST(body: Persona, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guardarPersonaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Persona>('post',`${this.basePath}/persona`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonasApellidoOnombre
     * 
     * @param apellido apellido
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasApellidoOnombreUsingGET(apellido: string, nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasApellidoOnombreUsingGET(apellido: string, nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasApellidoOnombreUsingGET(apellido: string, nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasApellidoOnombreUsingGET(apellido: string, nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (apellido === null || apellido === undefined) {
            throw new Error('Required parameter apellido was null or undefined when calling listarPersonasApellidoOnombreUsingGET.');
        }

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasApellidoOnombreUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apellido !== undefined && apellido !== null) {
            queryParameters = queryParameters.set('apellido', <any>apellido);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/findPersonasPublicanNombreOapellido`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonasByCedula
     * 
     * @param edad edad
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasByCedulaUsingGET(edad: number, nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasByCedulaUsingGET(edad: number, nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasByCedulaUsingGET(edad: number, nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasByCedulaUsingGET(edad: number, nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edad === null || edad === undefined) {
            throw new Error('Required parameter edad was null or undefined when calling listarPersonasByCedulaUsingGET.');
        }

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasByCedulaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (edad !== undefined && edad !== null) {
            queryParameters = queryParameters.set('edad', <any>edad);
        }
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/findPersonasPublican`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonasMayores
     * 
     * @param edad edad
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasMayoresUsingGET(edad: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasMayoresUsingGET(edad: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasMayoresUsingGET(edad: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasMayoresUsingGET(edad: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edad === null || edad === undefined) {
            throw new Error('Required parameter edad was null or undefined when calling listarPersonasMayoresUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (edad !== undefined && edad !== null) {
            queryParameters = queryParameters.set('edad', <any>edad);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/findPersonasMayoresPublican`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listarPersonas
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNamenotnull
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNamenotnullUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNamenotnullUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNamenotnullUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNamenotnullUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynamenotnull`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNnotnombre
     * 
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNnotnombreUsingGET(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNnotnombreUsingGET(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNnotnombreUsingGET(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNnotnombreUsingGET(nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasbyNnotnombreUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynamenot`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNombreContain
     * 
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNombreContainUsingGET(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNombreContainUsingGET(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNombreContainUsingGET(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNombreContainUsingGET(nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasbyNombreContainUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynamecontaint`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNombreNotContain
     * 
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNombreNotContainUsingGET(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNombreNotContainUsingGET(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNombreNotContainUsingGET(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNombreNotContainUsingGET(nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasbyNombreNotContainUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynameNotcontaint`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNombre
     * 
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNombreUsingGET(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNombreUsingGET(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNombreUsingGET(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNombreUsingGET(nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasbyNombreUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynombre`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyNomnreRegex
     * 
     * @param nombre nombre
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyNomnreRegexUsingGET(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyNomnreRegexUsingGET(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyNomnreRegexUsingGET(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyNomnreRegexUsingGET(nombre: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling listarPersonasbyNomnreRegexUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nombre !== undefined && nombre !== null) {
            queryParameters = queryParameters.set('nombre', <any>nombre);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbynameregex`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyedad
     * 
     * @param desde desde
     * @param hasta hasta
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyedadUsingGET(desde: number, hasta: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyedadUsingGET(desde: number, hasta: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyedadUsingGET(desde: number, hasta: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyedadUsingGET(desde: number, hasta: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (desde === null || desde === undefined) {
            throw new Error('Required parameter desde was null or undefined when calling listarPersonasbyedadUsingGET.');
        }

        if (hasta === null || hasta === undefined) {
            throw new Error('Required parameter hasta was null or undefined when calling listarPersonasbyedadUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (desde !== undefined && desde !== null) {
            queryParameters = queryParameters.set('desde', <any>desde);
        }
        if (hasta !== undefined && hasta !== null) {
            queryParameters = queryParameters.set('hasta', <any>hasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbyedad`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyedadgreater
     * 
     * @param edad edad
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyedadgreaterUsingGET(edad: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyedadgreaterUsingGET(edad: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyedadgreaterUsingGET(edad: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyedadgreaterUsingGET(edad: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edad === null || edad === undefined) {
            throw new Error('Required parameter edad was null or undefined when calling listarPersonasbyedadgreaterUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (edad !== undefined && edad !== null) {
            queryParameters = queryParameters.set('edad', <any>edad);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbyedadgreater`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * ListarPersonasbyedadless
     * 
     * @param edad edad
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listarPersonasbyedadlessUsingGET(edad: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Persona>>;
    public listarPersonasbyedadlessUsingGET(edad: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Persona>>>;
    public listarPersonasbyedadlessUsingGET(edad: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Persona>>>;
    public listarPersonasbyedadlessUsingGET(edad: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edad === null || edad === undefined) {
            throw new Error('Required parameter edad was null or undefined when calling listarPersonasbyedadlessUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (edad !== undefined && edad !== null) {
            queryParameters = queryParameters.set('edad', <any>edad);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Persona>>('get',`${this.basePath}/persona/listbyedadless`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
